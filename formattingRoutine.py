def get_mark(mark):
    if mark == '10':
        return '‚úÖ'
    if mark == '0':
        return '‚ùå'
    if mark == '1':
        return '1Ô∏è‚É£'
    if mark == '2':
        return '2Ô∏è‚É£'
    if mark == '3':
        return '3Ô∏è‚É£'
    if mark == '4':
        return '4Ô∏è‚É£'
    if mark == '5':
        return '5Ô∏è‚É£'
    return 'üîç'


def check_for_unread_msgs(msgs):
    for msg in msgs:
        if '1' in msg['IsNew']:
            return True
    return False


def decl(number):
    titles = ['—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è',
              '—Å–æ–æ–±—â–µ–Ω–∏–π']
    cases = [2, 0, 1, 1, 1, 2]
    if 4 < number % 100 < 20:
        idx = 2
    elif number % 10 < 5:
        idx = cases[number % 10]
    else:
        idx = cases[5]

    return titles[idx]


def format_msg(message):
    result = '<b>{sender}</b>:\n{text}\n<i>{time}</i>'.format(sender=message['Fio'], text=message['Text'],
                                                              time=message['Date'])
    return result


def get_week_day(day):
    if day == 0:
        return '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    if day == 1:
        return '–í—Ç–æ—Ä–Ω–∏–∫'
    if day == 2:
        return '–°—Ä–µ–¥–∞'
    if day == 3:
        return '–ß–µ—Ç–≤–µ—Ä–≥'
    if day == 4:
        return '–ü—è—Ç–Ω–∏—Ü–∞'
    if day == 5:
        return '–°—É–±–±–æ—Ç–∞'
    if day == 6:
        return '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    return '???'


def get_week_day_short(day):
    if day == 0:
        return '–ü–æ–Ω–µ–¥.'
    if day == 1:
        return '–í—Ç–æ—Ä–Ω–∏–∫'
    if day == 2:
        return '–°—Ä–µ–¥–∞'
    if day == 3:
        return '–ß–µ—Ç–≤–µ—Ä–≥'
    if day == 4:
        return '–ü—è—Ç–Ω.'
    if day == 5:
        return '–°—É–±–±–æ—Ç–∞'
    if day == 6:
        return '–í—Å–∫'
    return '???'


ordered_attr = ['subject', 'type', 'time', 'teacher',  'place']


def get_string_by_attr(attr):
    if attr == 'teacher':
        return 'üßë‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> '
    if attr == 'subject':
        return '‚úè <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> '
    if attr == 'type':
        return 'üìñ <b>–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è:</b> '
    if attr == 'time':
        return '‚è≥ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:</b> '
    if attr == 'place':
        return 'üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:</b> '


def format_calendar(self, update, calendar, msgs=[], is_new='0'):
    result = ''
    for attr in ordered_attr:
        title = get_string_by_attr(str(attr))
        if title and getattr(calendar, attr):
            result += title + str(getattr(calendar, attr) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + '\n'

    if len(calendar.tasks) > 0:
        result += 'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: '

    for task in calendar.tasks:
        result += task + ' '

    result += '\n'
    if calendar.newTask:
        result += 'üì£ <b>–ï—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>' + '\n'

    if msgs is None:
        messagesCounter = 0
    else:
        messagesCounter = len(msgs)

    if messagesCounter > 0:
        if is_new == '1':
            result += 'üì¨ <b>–ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>' + '\n'
        elif check_for_unread_msgs(msgs):
            result += 'üó≥ <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!</b>' + '\n'
        result += '‚úâ –í —á–∞—Ç–µ {counter} {msg} \n'.format(counter=messagesCounter, msg=decl(messagesCounter))
    return result


def formatTasks(tasks, calendar):
    if len(tasks) == 0:
        calendar.newTask = True
        return calendar
    for task in tasks:
        calendar.tasks.append(get_mark(task['Result']))
    return calendar
