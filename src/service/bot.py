import random
import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

import config
from src.service import university
import datetime
from bs4 import BeautifulSoup
from datetime import date
from src.dto import calendarTable
from formattingRoutine import format_msg, get_week_day, format_calendar, formatTasks, get_week_day_short
import time
import json

from apscheduler.schedulers.background import BackgroundScheduler


class TelegramBot:

    def __init__(self):
        self.super = {174740505}
        self.sessions = {}
        self.scheduler = BackgroundScheduler({'apscheduler.timezone': 'Europe/Samara'})
        self.scheduler.start()
        updater = Updater(token=config.token, use_context=True)
        dispatcher = updater.dispatcher

        fire_handler = CommandHandler('fire', self.fire_now)
        dispatcher.add_handler(fire_handler)

        set_super_handler = CommandHandler('super', self.set_super)
        dispatcher.add_handler(set_super_handler)

        attend_handler = CommandHandler('attend', self.attend)
        dispatcher.add_handler(attend_handler)

        clear_attend = CommandHandler('attclear', self.clear_attendance)
        dispatcher.add_handler(clear_attend)

        stat_handler = CommandHandler('stat', self.statistics)
        dispatcher.add_handler(stat_handler)

        help_handler = CommandHandler('help', self.help)
        dispatcher.add_handler(help_handler)

        start_handler = CommandHandler('start', self.help)
        dispatcher.add_handler(start_handler)

        login_handler = CommandHandler('login', self.login)
        dispatcher.add_handler(login_handler)

        logout_handler = CommandHandler('logout', self.logout)
        dispatcher.add_handler(logout_handler)

        calendar_handler = CommandHandler('calendar', self.calendar)
        dispatcher.add_handler(calendar_handler)

        jump_to_handler = CommandHandler('to', self.jump_to)
        dispatcher.add_handler(jump_to_handler)

        active_handler = MessageHandler(Filters.text, self.on_msg_handler)
        dispatcher.add_handler(active_handler)

        dispatcher.add_handler(CallbackQueryHandler(self.calendar))
        while True:
            updater.start_polling()
            time.sleep(1800)
            self.session_loop(updater.bot)

    def session_loop(self, bot):
        for chat_id in self.sessions.keys():
            if self.is_Authorized(chat_id):
                data = self.request_year_data(chat_id)
                self.check_for_date_updates(data, bot, chat_id)

    def on_msg_handler(self, update: Update, context: CallbackContext):
        chat = update.effective_chat
        msg = update.effective_message
        if chat.id in self.sessions and self.sessions[chat.id].interactive:
            if self.sessions[chat.id].msg_id is not None and self.sessions[update.effective_chat.id].test_fnc(
                    self.sessions[chat.id].msg_id, msg.text) is not None:  # send_msg
                chat.bot.send_message(chat_id=chat.id,
                                      text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                                      parse_mode='html')

    def attend(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        if not self.check_super(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üîë–û—à–∏–±–∫–∞!</b>\n–í–∞–º –Ω–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –î–ª—è —É—á—Ç–æ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É: contact@babunov.dev',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if not self.is_Authorized(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üîë–û—à–∏–±–∫–∞!</b>\n–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        chat = update.effective_chat
        msg = update.effective_message
        msg_content = msg.text.split(maxsplit=1)
        if len(msg_content) == 1:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏</b>\n'
                                                    '–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã\n<b>/attend —Å–∏—Å—Ç–µ–º—ã: 17.11, 18.11; –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 20.11</b>\n'
                                                    '\n–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n<b>/attend (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–æ –≤ –Ω–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ—Å—è): (–¥–∞—Ç—ã); (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)</b>\n'
                                                    '\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ—à–∏–±–∫—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /attclear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n'
                                                    '–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ –ë–ï–¢–ê —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å–±–æ–π.',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        commands = msg_content[1].split(';')
        for command in commands:
            args = command.split(':')
            subject = args[0]
            datestamps = args[1].split(',')
            for datestamp in datestamps:
                self.createTask(update, context, subject, datestamp)

    def set_super(self, update, context):
        if update.effective_chat.id not in self.super:
            return

        chat = update.effective_chat
        msg = update.effective_message
        msg_content = msg.text.split(maxsplit=1)
        with open('stats.json', 'r+') as f:
            data = json.load(f)
            for user in data['user_stats']:
                if user['Telegram'] == msg_content[1]:
                    user['isSuper'] = True
                    chat.bot.send_message(chat_id=chat.id,
                                          text='–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
                                          parse_mode='html')
            f.seek(0)
            json.dump(data, f, indent=4)
            f.truncate()

    def check_super(self, id):
        with open('stats.json') as f:
            data = json.load(f)
            for user in data['user_stats']:
                if user['ID'] == id:
                    return user['isSuper']
        return False

    def createTask(self, update, context, subject, datestamp):
        next_day = date.today()
        month = date.today().month
        year = date.today().year
        args = datestamp.split('.')
        try:
            if len(args) == 1:
                next_day = datetime.datetime.strptime('{d}.{m}.{y}'.format(d=int(args[0]), m=month, y=year),
                                                      '%d.%m.%Y').date()
            if len(args) == 2:
                next_day = datetime.datetime.strptime('{d}.{m}.{y}'.format(d=int(args[0]), m=int(args[1]), y=year),
                                                      '%d.%m.%Y').date()
            if len(args) == 3:
                next_day = datetime.datetime.strptime(
                    '{d}.{m}.{y}'.format(d=int(args[0]), m=int(args[1]), y=int(args[2])),
                    '%d.%m.%Y').date()
        except Exception as e:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>–û—à–∏–±–∫–∞!</b>\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        # self.calendar(update, context, (next_day - date.today()).days)
        day_after = (next_day + datetime.timedelta(days=1))
        response = self.sessions[update.effective_chat.id].get_calendar_data(next_day.strftime("%Y-%m-%d"),
                                                                             day_after.strftime("%Y-%m-%d"))
        is_found = False
        if response is None:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è! üîëüîëüîë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \n'
                                                    '/login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        for entry in response:
            if subject.lower() in entry['title'].lower():
                is_found = True
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text='–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...\n'
                                              '–í—ã –±—É–¥–µ—Ç–µ –æ—Ç–º–µ—á–µ–Ω—ã:\n'
                                              '–ü—Ä–µ–¥–º–µ—Ç: ' + entry['title'] + '\n'
                                                                             '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ' + entry['start'])
                self.scheduler.add_job(self.send_attendance, 'date',
                                       run_date=datetime.datetime.strptime(entry['start'], '%Y-%m-%dT%H:%M:%S'),
                                       # datetime.datetime.strptime(entry['start'], '%Y-%m-%dT%H:%M:%S') || datetime.datetime.now() + datetime.timedelta(minutes=1)
                                       args=[update.effective_chat.id, entry['url']],
                                       id=str(update.effective_chat.id) + ' ' + entry['ID'],
                                       misfire_grace_time=600)

        if not is_found:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n')
        return None

    def send_attendance(self, chat_id, url):
        print("STARTED!!!!")
        html_to_parse = self.sessions[chat_id].get_page_to_parse(url)
        msgs_ids = self.get_msg_id(html_to_parse)
        csrf = self.get_csrf(html_to_parse)
        attnd_variants = [
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é.',
            '–ù–∞ –∑–∞–Ω—è—Ç–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é',
            '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é'
        ]
        self.sessions[chat_id].test_fnc(msgs_ids, random.choice(attnd_variants), csrf)

    def fire_now(self, update, context):
        if update.effective_chat.id not in self.super:
            return
        for job in self.scheduler.get_jobs():
            job.modify(next_run_time=datetime.datetime.now())

    def clear_attendance(self, update, context):
        if not self.check_super(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üîë–û—à–∏–±–∫–∞!</b>\n–í–∞–º –Ω–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –î–ª—è —É—á—Ç–æ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É: contact@babunov.dev',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        counter = 0
        for job in self.scheduler.get_jobs():
            if job.id.split()[0] == str(update.effective_chat.id):
                self.scheduler.remove_job(job.id)
                counter += 1
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ó–∞–¥–∞—á –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ: ' + str(counter))

    def check_for_date_updates(self, data, bot, chat_id):
        for entry in data:
            is_new = False
            cur_date = datetime.datetime.strptime(entry['start'], '%Y-%m-%dT%H:%M:%S').date()
            message = '<b>üî• –ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç–µ: ' + cur_date.strftime(
                "%d.%m.%Y") + ' ' + get_week_day(cur_date.weekday()) + '</b>' + '\n' + '‚úè –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ' + entry[
                          'title'] + '\n'
            new_msgs_data = []
            if entry['IsNew'] == '1':
                message += 'üì¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' + '\n'
                html_to_parse = self.sessions[chat_id].get_page_to_parse(entry['url'])
                msgs_ids = self.get_msg_id(html_to_parse)
                messages = self.sessions[chat_id].get_messages_to_parse(msgs_ids, False)
                cache = self.get_cached_msgs(chat_id)
                for msg in messages:
                    if msg['ID'] not in cache:
                        new_msgs_data.append(msg['ID'])
                        is_new = True

            if entry['NewResult'] != '0':
                message += 'üìù –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ —Å—é–¥–∞: contact@babunov.dev)' + '\n'
                is_new = True
            if is_new:
                self.write_updates_cache(chat_id, new_msgs_data)
                keyboard = [
                    [
                        InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—Ç–µ üëÄ", callback_data=str(cur_date)),
                    ],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                bot.send_message(chat_id=chat_id,
                                 text=message,
                                 parse_mode='html', reply_markup=reply_markup)

    def get_term(self):
        summer = date(date.today().year, 9, 1)
        monitor_start = date(date.today().year, 1, 1) if date.today() < summer else summer
        monitor_end = date(date.today().year, 12, 31)
        return {'start': monitor_start, 'end': monitor_end}

    def request_year_data(self, chat_id):
        data = self.get_term()
        return self.sessions[chat_id].get_calendar_data(data['start'].strftime("%Y-%m-%d"),
                                                        data['end'].strftime("%Y-%m-%d"))

    def request_year_info(self):
        data = self.get_term()
        return data['start'].strftime("%Y-%m-%d") + ':' + data['end'].strftime("%Y-%m-%d")

    def write_stats(self, new_data, filename='stats.json'):
        with open(filename, 'r+') as file:
            file_data = json.load(file)
            for entry in file_data["user_stats"]:
                if new_data["ID"] == entry["ID"]:
                    return
            file_data["user_stats"].append(new_data)
            file.seek(0)
            json.dump(file_data, file, indent=4)

    def get_cached_msgs(self, chat_id):
        filename = 'src/service/updates_cache.json'
        with open(filename, 'r+') as file:
            file_data = json.load(file)

            for entry in file_data['user_data']:
                if chat_id == entry['ID']:
                    return entry['msgs']
        return []

    def write_updates_cache(self, chat_id, new_data):
        filename = 'src/service/updates_cache.json'
        file_data = json.load(open(filename))
        cur_date = self.request_year_info()
        if file_data['date'] != cur_date:
            file_data['user_data'] = []
            file_data['date'] = cur_date

        is_found = False
        for entry in file_data['user_data']:
            if entry['ID'] == chat_id:
                is_found = True
                if 'msgs' in entry:
                    entry['msgs'] = entry['msgs'] + new_data
                else:
                    entry['msgs'] = new_data
                break

        if not is_found:
            file_data['user_data'].append({'ID': chat_id, 'msgs': new_data})

        json.dump(file_data, open(filename, "w"), indent=4)

    def stat_count(self, filename='stats.json'):
        with open(filename, 'r+') as file:
            file_data = json.load(file)
            return len(file_data["user_stats"])

    def statistics(self, update, context):
        if update.effective_user['id'] not in self.super:
            return
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text='<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> \n'
                                                '–û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: ' + str(len(self.sessions)) + '\n'
                                                                                              '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(
                                               self.stat_count()) + '\n',
                                           parse_mode='html')

    def help(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        self.clear_screen(update, context)
        self.sessions[update.effective_chat.id].messages_to_delete.append(update.message)
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="<b>–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?</b>\n"
                                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"
                                                "1. <b>/login</b> [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å] - –ò—Å–ø–æ–ª—å–∑–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –õ–ö \n"
                                                "2. <b>/calendar</b> - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
                                                "3. <b>/logout</b> - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                                                "4. <b>/to</b> [–¥–µ–Ω—å].[–º–µ—Å—è—Ü].[–≥–æ–¥] - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—É\n"
                                                "5. <b>/help</b> - –ü–æ–º–æ–≥–∏—Ç–µ, —è –ø–æ—Ç–µ—Ä—è–ª—Å—è...(–¢—ã —É–∂–µ –∑–¥–µ—Å—å)\n"
                                                "<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?</b>\n"
                                                "–ë–æ—Ç –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ <i>–Ω–æ–≤—ã—Ö "
                                                "—Å–æ–æ–±—â–µ–Ω–∏–π</i> –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π‚ö°Ô∏è\n"
                                                "–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞, –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, —Ç—ã –º–æ–∂–µ—à—å <i>–ø—Ä–æ—á–∏—Ç–∞—Ç—å "
                                                "—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ü–µ–Ω–∫–∏</i>üëÄ\n"
                                                "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ –ø–æ—á—Ç—É: <i>contact@babunov.dev</i>",
                                           parse_mode='html')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        if update.effective_user['id'] in self.super:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text="<b>üõ†–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞üõ†</b> \n"
                                                    "1. <b>/stat</b> - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ \n",
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def jump_to(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        if not self.is_Authorized(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üîë–û—à–∏–±–∫–∞!</b>\n–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if len(context.args) == 0:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üñç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! /to [–¥–µ–Ω—å].[–º–µ—Å—è—Ü].[–≥–æ–¥]\n'
                                                    '–ü—Ä–∏–º–µ—Ä: /to 20.08.2021\n'
                                                    '<i>–ú–µ—Å—è—Ü –∏ –≥–æ–¥ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã <b>–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã</b>.</i>',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        args = context.args[0].split('.')
        next_day = date.today()
        month = date.today().month
        year = date.today().year
        try:
            if len(args) == 1:
                next_day = datetime.datetime.strptime('{d}.{m}.{y}'.format(d=int(args[0]), m=month, y=year),
                                                      '%d.%m.%Y').date()
            if len(args) == 2:
                next_day = datetime.datetime.strptime('{d}.{m}.{y}'.format(d=int(args[0]), m=int(args[1]), y=year),
                                                      '%d.%m.%Y').date()
            if len(args) == 3:
                next_day = datetime.datetime.strptime(
                    '{d}.{m}.{y}'.format(d=int(args[0]), m=int(args[1]), y=int(args[2])),
                    '%d.%m.%Y').date()
        except Exception as e:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>–û—à–∏–±–∫–∞!</b>\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        self.calendar(update, context, (next_day - date.today()).days)

    def is_Authorized(self, id):
        today = date.today()
        loginCheck = self.sessions[id].get_calendar_data(today.strftime("%Y-%m-%d"),
                                                         today.strftime("%Y-%m-%d"))
        return loginCheck is not None

    def logout(self, update, context):
        if update.effective_chat.id in self.sessions and self.is_Authorized(update.effective_chat.id):
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='üîí<b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.', parse_mode='html')
            self.sessions.pop(update.effective_chat.id)
            return
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='<b>üîë–û—à–∏–±–∫–∞!</b>\n–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                                 parse_mode='html')

    def login(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        self.clear_screen(update, context)
        context.bot.delete_message(chat_id=update.effective_chat.id,
                                   message_id=update.message['message_id'])
        if len(context.args) != 2:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>üñç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n'
                                                    '–ü—Ä–∏–º–µ—Ä: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]', parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if self.is_Authorized(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üîì')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if self.sessions[update.effective_chat.id].login(context.args[0], context.args[1]):
            user = update.message.from_user
            new_user = {
                "Telegram": "@" + user['username'],
                "ID": user['id'],
                "isSuper": False
            }
            self.write_stats(new_user)
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üîì \n'
                                                    '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /calendar')
        else:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üîí \n'
                                                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def clear_screen(self, update, context):
        if len(self.sessions) == 0:
            return
        for message in self.sessions[update.effective_chat.id].messages_to_delete:
            try:
                context.bot.delete_message(chat_id=update.effective_chat.id,
                                           message_id=message['message_id'])
            except Exception as e:
                print("too old")
        self.sessions[update.effective_chat.id].messages_to_delete = []

    def calendar(self, update, context, week_day=date.today()):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service
        self.sessions[update.effective_chat.id].interactive = False
        self.clear_screen(update, context)
        if update.message is not None:
            self.sessions[update.effective_chat.id].messages_to_delete.append(update.message)

        query = update.callback_query
        if query is not None:
            query.answer()
            choice = query.data
            if choice.split()[0] == 'msg':
                split = choice.split()
                ids = [split[2], split[3], split[4]]
                self.process_msgs(update, context, split[1], ids)
            else:
                week_day = datetime.datetime.strptime(choice, "%Y-%m-%d").date()
                self.process_calendar(update, context, week_day, query.message)
        else:
            self.process_calendar(update, context, week_day)

    def get_week_days(self, check_day):
        year, week, dow = (datetime.datetime.combine(check_day, datetime.datetime.now().time())).isocalendar()
        week_start = datetime.datetime.strptime(str(year) + "-" + str(week - 1) + "-0", "%Y-%W-%w")
        return [(week_start + datetime.timedelta(days=x)) for x in range(1, 8)]

    def create_navigation_keyboard(self, check_day):
        week_days_arr = self.get_week_days(check_day)
        keyboard = [
            [],
            [InlineKeyboardButton("‚èÆ", callback_data=str(check_day - datetime.timedelta(days=7)))],
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è ‚Ü©", callback_data=str(date.today()))],
        ]
        for i in range(7):
            if i > 4:
                keyboard[1].append(
                    InlineKeyboardButton(get_week_day_short(week_days_arr[i].date().weekday()),
                                         callback_data=str(week_days_arr[i].date()))
                )
            else:
                keyboard[0].append(
                    InlineKeyboardButton(get_week_day_short(week_days_arr[i].weekday()),
                                         callback_data=str(week_days_arr[i].date()))
                )

        keyboard[1].append(InlineKeyboardButton("‚è≠", callback_data=str(check_day + datetime.timedelta(days=7))))
        return InlineKeyboardMarkup(keyboard)

    def process_calendar(self, update: Update, context: CallbackContext, check_day, message=None):
        self.sessions[update.effective_chat.id].offset = check_day
        next_day = check_day + datetime.timedelta(days=1)
        response = self.sessions[update.effective_chat.id].get_calendar_data(check_day.strftime("%Y-%m-%d"),
                                                                             next_day.strftime("%Y-%m-%d"))
        if response is None:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è! üîëüîëüîë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \n'
                                                    '/login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        self.parse_date(context, update, response, check_day)

        reply_markup = self.create_navigation_keyboard(check_day)

        if message is None:
            message = update.message.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:            ', reply_markup=reply_markup)
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        else:
            message = message.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:            ', reply_markup=reply_markup)
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def parse_date(self, context, update, dateInfo, current_date):
        self.sessions[update.effective_chat.id].messages_to_show = {}
        # self.sessions[update.effective_chat.id].short_cache = []
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text='<b>üìÜ –î–∞—Ç–∞:' + current_date.strftime(
                                               "%d.%m.%Y") + ' ' + get_week_day(current_date.weekday()) + '</b>',
                                           parse_mode='html')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        # self.sessions[update.effective_chat.id].short_cache.append(message.text_html)
        if len(dateInfo) == 0:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b> üòé',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        self.sessions[update.effective_chat.id].cache = {}
        for item in dateInfo:
            html_to_parse = self.sessions[update.effective_chat.id].get_page_to_parse(item['url'])
            table = self.parse_table(html_to_parse)
            taskId = self.get_task_id(html_to_parse)
            msgs_ids = self.get_msg_id(html_to_parse)
            messages = self.sessions[update.effective_chat.id].get_messages_to_parse(msgs_ids, False)
            table.msg_ids = ' '.join(msgs_ids)
            self.sessions[update.effective_chat.id].cache[' '.join(msgs_ids)] = self.get_csrf(html_to_parse)
            self.sessions[update.effective_chat.id].messages_to_show[' '.join(msgs_ids)] = messages
            if taskId is not None:
                tasksToFormat = self.sessions[update.effective_chat.id].get_tasks_to_parse(taskId)
                table = formatTasks(tasksToFormat, table)
            result = format_calendar(self, update, table, messages, item['IsNew'])

            # if len(messages) > 0:
            delta = current_date - datetime.date.today()
            keyboard = [
                [InlineKeyboardButton("–ß–∞—Ç",
                                      callback_data='msg {days} {id0} {id1} {id2}'.format(days=str(current_date),
                                                                                          id0=msgs_ids[0],
                                                                                          id1=msgs_ids[1],
                                                                                          id2=msgs_ids[2]))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text=result, parse_mode='html', reply_markup=reply_markup)
            # else:
            #    message = context.bot.send_message(chat_id=update.effective_chat.id,
            #                                      text=result, parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            # self.sessions[update.effective_chat.id].short_cache.append(result)
            # self.sessions[update.effective_chat.id].context = context

    def get_task_id(self, html):
        soup = BeautifulSoup(html)
        taskGrid = soup.find('div', {'ng-modules': 'DistanceLearning'}).find('div', {'class': 'grid-view'})
        if taskGrid is not None:
            taskIdToParse = taskGrid.attrs['ng-init']
            return taskIdToParse[taskIdToParse.find("(") + 1:taskIdToParse.find(")")]
        return None

    def get_csrf(self, html):
        soup = BeautifulSoup(html)
        container = soup.find("meta", {"name": "csrf-token"})
        return container.attrs['content']

    def get_msg_id(self, html):
        soup = BeautifulSoup(html)
        distanceLearningGrid = soup.find('div', {'ng-modules': 'DistanceLearning'})
        if distanceLearningGrid is not None:
            IdBlockToParse = distanceLearningGrid.attrs['ng-init']
            return IdBlockToParse[IdBlockToParse.find("(") + 1:IdBlockToParse.find(")")].split(', ')
        return None

    def parse_table(self, html):
        soup = BeautifulSoup(html)
        table = soup.find("table", {"id": "w0"})
        rows = table.find_all('tr')
        calendar = calendarTable.CalendarTable()
        for row in rows:
            header = row.find('th')
            value = row.find('td')
            if header.contents[0] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
                calendar.teacher = value.text.strip()
            if header.contents[0] == '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞':
                calendar.subject = value.text.strip()
            if header.contents[0] == '–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è':
                calendar.type = value.text.strip()
            if header.contents[0] == '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è':
                calendar.time = value.text.strip()
            if header.contents[0] == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è':
                calendar.place = value.text.strip()

        return calendar

    def process_msgs(self, update, context, date_back, ids):
        key = ' '.join(ids)
        lst = self.sessions[update.effective_chat.id].messages_to_show.get(key)
        to_delete = context.bot.send_message(chat_id=update.effective_chat.id,
                                             text="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç", parse_mode='html')
        self.sessions[update.effective_chat.id].messages_to_delete.append(to_delete)
        for message in lst:
            to_delete = context.bot.send_message(chat_id=update.effective_chat.id,
                                                 text=format_msg(message), parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(to_delete)

        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=date_back)],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        message = to_delete.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:            ', reply_markup=reply_markup)
        self.sessions[update.effective_chat.id].get_messages_to_parse(ids, True)
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        self.sessions[update.effective_chat.id].msg_id = ids
        self.sessions[update.effective_chat.id].interactive = True

    # def return_cache(self, id):
    #    id = int(id)
    #    for msg in self.sessions[id].short_cache:
    #        to_delete = self.sessions[id].context.bot.send_message(chat_id=id,
    #                                                               text=msg, parse_mode='html')
    #        self.sessions[id].messages_to_delete.append(to_delete)
    #    reply_markup = self.create_navigation_keyboard(self.sessions[id].offset)
    #    message = to_delete.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:', reply_markup=reply_markup)
    #    self.sessions[id].messages_to_delete.append(message)
