import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, ConversationHandler, CallbackQueryHandler, CallbackContext
import config
from src.service import university
import datetime
from bs4 import BeautifulSoup
from datetime import date
from src.dto import calendarTable


class TelegramBot:
    def __init__(self):
        self.sessions = {}
        updater = Updater(token=config.token, use_context=True)
        dispatcher = updater.dispatcher
        help_handler = CommandHandler('help', self.help)
        dispatcher.add_handler(help_handler)
        start_handler = CommandHandler('start', self.help)
        dispatcher.add_handler(start_handler)
        login_handler = CommandHandler('login', self.login)
        dispatcher.add_handler(login_handler)
        calendar_handler = CommandHandler('calendar', self.calendar)
        dispatcher.add_handler(calendar_handler)
        dispatcher.add_handler(CallbackQueryHandler(self.calendar))
        while True:
            updater.start_polling()

    def help(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        self.clearScreen(update, context)
        self.sessions[update.effective_chat.id].messages_to_delete.append(update.message)
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ü—Ä–∏–≤–µ—Ç\! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\? \n *–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:* \n 1\. /login –õ–æ–≥–∏–Ω "
                                                "–ü–∞—Ä–æ–ª—å \- –∏—Å–ø–æ–ª—å–∑–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –õ–ö \n 2\. /calendar \- –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
                                                "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è", parse_mode='MarkdownV2')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def isAuthorized(self, id):
        today = date.today()
        loginCheck = self.sessions[id].getCalendarData(today.strftime("%Y-%m-%d"),
                                                       today.strftime("%Y-%m-%d"))
        return loginCheck is not None

    def login(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        self.clearScreen(update, context)
        context.bot.delete_message(chat_id=update.effective_chat.id,
                                   message_id=update.message['message_id'])
        if len(context.args) != 2:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùó‚ùó‚ùó \n –ü—Ä–∏–º–µ—Ä: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if self.isAuthorized(update.effective_chat.id):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üîì')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        if self.sessions[update.effective_chat.id].login(context.args[0], context.args[1]):
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üîì \n –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /calendar')
        else:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üîí \n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def clearScreen(self, update, context):
        for message in self.sessions[update.effective_chat.id].messages_to_delete:
            context.bot.delete_message(chat_id=update.effective_chat.id,
                                       message_id=message['message_id'])
        self.sessions[update.effective_chat.id].messages_to_delete = []

    def calendar(self, update, context):
        if update.effective_chat.id not in self.sessions:
            service = university.University()
            self.sessions[update.effective_chat.id] = service

        self.clearScreen(update, context)
        if update.message is not None:
            self.sessions[update.effective_chat.id].messages_to_delete.append(update.message)
        week_day = 0

        query = update.callback_query
        if query is not None:
            query.answer()
            choice = query.data
            week_day = int(choice)
            self.process_calendar(update, context, week_day, query.message)
        else:
            self.process_calendar(update, context, week_day)

    def process_calendar(self, update: Update, context: CallbackContext, week_day, message=None):
        today = date.today()
        check_day = today + datetime.timedelta(days=week_day)
        next_day = today + datetime.timedelta(days=week_day + 1)
        response = self.sessions[update.effective_chat.id].getCalendarData(check_day.strftime("%Y-%m-%d"),
                                                                           next_day.strftime("%Y-%m-%d"))
        if response is None:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è! üîëüîëüîë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \n /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return
        self.parseDate(context, update, response, check_day)
        keyboard = [
            [
                InlineKeyboardButton("‚óÄ", callback_data=str(week_day - 1)),
                InlineKeyboardButton("‚ñ∂", callback_data=str(week_day + 1)),
            ],
            [
                InlineKeyboardButton("‚èÆ", callback_data=str(week_day - 7)),
                InlineKeyboardButton("‚è≠", callback_data=str(week_day + 7)),
            ],
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è ‚Ü©", callback_data='0')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if message is None:
            message = update.message.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:', reply_markup=reply_markup)
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        else:
            message = message.reply_text('–ù–∞–≤–∏–≥–∞—Ü–∏—è:', reply_markup=reply_markup)
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def parseDate(self, context, update, dateInfo, current_date):
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text='<b>üìÜ –î–∞—Ç–∞:' + current_date.strftime(
                                               "%d.%m.%Y") + ' ' + self.getWeekDay(current_date.weekday()) + '</b>',
                                           parse_mode='html')
        self.sessions[update.effective_chat.id].messages_to_delete.append(message)
        if len(dateInfo) == 0:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='<b>–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b> üòé',
                                               parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)
            return

        for item in dateInfo:
            html_to_parse = self.sessions[update.effective_chat.id].getPageToParse(item['url'])
            table = self.parseTable(html_to_parse)
            taskId = self.getTaskId(html_to_parse)
            if taskId is not None:
                tasksToFormat = self.sessions[update.effective_chat.id].getTasksToParse(taskId)
                table = self.formatTasks(tasksToFormat, table)
            result = self.formatCalendar(table)
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text=result, parse_mode='html')
            self.sessions[update.effective_chat.id].messages_to_delete.append(message)

    def getMark(self, mark):
        if mark == '10':
            return '‚úÖ'
        if mark == '0':
            return '‚ùå'
        if mark == '1':
            return '1Ô∏è‚É£'
        if mark == '2':
            return '2Ô∏è‚É£'
        if mark == '3':
            return '3Ô∏è‚É£'
        if mark == '4':
            return '4Ô∏è‚É£'
        if mark == '5':
            return '5Ô∏è‚É£'
        return 'üîç'

    def formatTasks(self, tasks, calendar):
        if len(tasks) == 0:
            calendar.newTask = True
            return calendar
        for task in tasks:
            calendar.tasks.append(self.getMark(task['Result']))
        return calendar

    def getTaskId(self, html):
        soup = BeautifulSoup(html)
        taskGrid = soup.find('div', {'ng-modules': 'DistanceLearning'}).find('div', {'class': 'grid-view'})
        if taskGrid is not None:
            taskIdToParse = taskGrid.attrs['ng-init']
            return taskIdToParse[taskIdToParse.find("(") + 1:taskIdToParse.find(")")]
        return None

    def parseTable(self, html):
        soup = BeautifulSoup(html)
        table = soup.find("table", {"id": "w0"})
        rows = table.find_all('tr')
        calendar = calendarTable.CalendarTable()
        for row in rows:
            header = row.find('th')
            value = row.find('td')
            if header.contents[0] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
                calendar.teacher = value.text.strip()
            if header.contents[0] == '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞':
                calendar.subject = value.text.strip()
            if header.contents[0] == '–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è':
                calendar.type = value.text.strip()
            if header.contents[0] == '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è':
                calendar.time = value.text.strip()
            if header.contents[0] == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è':
                calendar.place = value.text.strip()

        return calendar

    def formatCalendar(self, calendar):
        result = ''
        result += 'üßë‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> ' + calendar.teacher + '\n'
        result += '‚úè <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> ' + calendar.subject + '\n'
        result += 'üìñ –í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + calendar.type + '\n'
        result += '‚è≥ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: ' + calendar.time + '\n'
        result += 'üìç <i>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:</i> ' + calendar.place + '\n'
        if len(calendar.tasks) > 0:
            result += 'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: '
        for task in calendar.tasks:
            result += task + ' '
        result += '\n'
        if calendar.newTask:
            result += 'üì£ <b>–ï—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>' + '\n'
        return result

    def getWeekDay(self, day):
        if day == 0:
            return '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        if day == 1:
            return '–í—Ç–æ—Ä–Ω–∏–∫'
        if day == 2:
            return '–°—Ä–µ–¥–∞'
        if day == 3:
            return '–ß–µ—Ç–≤–µ—Ä–≥'
        if day == 4:
            return '–ü—è—Ç–Ω–∏—Ü–∞'
        if day == 5:
            return '–°—É–±–±–æ—Ç–∞'
        if day == 6:
            return '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        return '???'
